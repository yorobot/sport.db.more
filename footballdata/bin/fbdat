#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbdat

require 'footballdata'


load_env   ## use dotenv (.env)


Webcache.root =  if File.exist?( '/sports/cache' )
                     puts "  setting web cache to >/sports/cache<"
                     '/sports/cache'
                 else
                     './cache'
                 end

## note -  free tier (tier one) plan - 10 requests/minute
##              (one request every 6 seconds 6*10=60 secs)
##     10 API calls per minute max.
##  note - default sleep (delay in secs) is 3 sec(s)

## change from 10 to 1 sec(s) for interactive use
Webget.config.sleep  = 1


Footballdata.config.convert.out_dir =  if File.exist?( '/sports/cache.api.fbdat' )
                                           puts "  setting convert out_dir to >/sports/cache.api.fbdat<"
                                           '/sports/cache.api.fbdat'
                                       else
                                           '.' ## use working dir
                                       end


require 'optparse'



module Footballdata
def self.main( args=ARGV )

opts = {
   cached:  false,
   convert: true,
}

parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options] [args]"

  parser.on( "--cache", "--cached", "--offline",
               "use cached data in #{Webcache.root} - default is (#{opts[:cached]})" ) do |cached|
    opts[:cached] = cached
  end

  parser.on( "--no-convert",
               "turn off conversion to .csv in #{Footballdata.config.convert.out_dir} - default is (#{!opts[:convert]})" ) do |convert|
    opts[:convert] = !convert
  end
end
parser.parse!( args )



puts "OPTS:"
p opts
puts "ARGV:"
p args


## try special args

if ['plan', 'plans',
    'comp', 'comps'].include?(args[0])

    if opts[:cached]
        ## do nothing
    else
      Metal.competitions( auth: true )   ## get free tier (TIER_ONE) with auth (token)
    end

  url = Metal.competitions_url
  pp url
  #=> "http://api.football-data.org/v4/competitions"

  data = Webcache.read_json( url )
  pp data

  comps = data['competitions']
  comps.each do |rec|
      print "==> "
      print "#{rec['area']['name']} (#{rec['area']['code']}) - "
      print "#{rec['name']} (#{rec['code']}) -- "
      print "#{rec['plan']} #{rec['type']}, "
      print "#{rec['numberOfAvailableSeasons']} season(s)"
      print "\n"

      print "     #{rec['currentSeason']['startDate']} - #{rec['currentSeason']['endDate']} "
      print "@ #{rec['currentSeason']['currentMatchday']}"
      print "\n"
  end

  puts "  #{comps.size} competition(s)"
  exit 0
end


###
#  pretty print today's matches  (tomorrow/yesterday/etc.)


##
## note - cannot use t for today (used for tomorrow)
##             find a different shortcode - why? why not?

### note - today is default if no args passed in!!!

##
## todo - add more date offsets - t+2,t+3,t+4, etc.

date =  if ['y', 'yesterday', 't-1', '-1'].include?( args[0] )
            Date.today-1
        elsif ['t', 'tomorrow', 't+1', '1', '+1'].include?( args[0] )
            Date.today+1
        elsif ['m', 'match', 'matches', 'today'].include?( args[0] || 'today' )  ## make default - why? why not?
            Date.today
        else
            nil
        end

if date
  if opts[:cached]
      ## do nothing
  else
     Metal.todays_matches( date )
  end

  data = Webcache.read_json( Metal.todays_matches_url( date ) )
  pp data

  last_comp = nil
  data['matches'].each do |rec|
    ## only print competition header if different from last match
    comp = fmt_competition( rec )
    puts comp   if comp != last_comp

    puts fmt_match( rec )

    last_comp = comp
  end
  exit 0
end



###
#  league and season - pretty print matches
#
##  samples:
##   national teams
##    EC 2024  - euro
##    EC 2021
##    WC 2022  - world cup
##   club cups intl
##    CL 2023  - (uefa/european) champions league
##    CLI 2204 - (south american) copa libertadores
##   club leagues
##    PL 2024  - england premiere league

##
## note - only use "generic" uniform league codes for now!!

league_code       = (args[0] || 'eng.1').downcase

##  todo - find a better name
##  use internal_league_code or such - why? why not?
###  convenience helpers - lets you use eng.1, euro, etc.
## check if mapping for league_code
metal_league_code = find_league!( league_code )


season            = Season( args[1] ||
                             (['euro',
                               'copa.l',
                               'br.1'].include?(league_code) ? '2024' : '2024/25'))

season_start_year  = season.start_year   ## use year - why? why not?

pp [metal_league_code, season_start_year]

if opts[:cached]
    ## do nothing
else
    ## download dataset(s)
    ## try download
    ##   note:  include teams (for convert) for now too!!
    Metal.teams( metal_league_code, season_start_year )
    Metal.matches( metal_league_code, season_start_year )
end

url = Metal.competition_matches_url( metal_league_code,
                                      season_start_year )
pp url
#=> "http://api.football-data.org/v4/competitions/EC/matches?season=2024"

data = Webcache.read_json( url )
## pp data

pp_matches( data )


if opts[:convert]
  puts "==> converting to .csv"
  convert( league: league_code, season: season )
end


end  # def self.main
end  # module Footballdata



Footballdata.main( ARGV )


puts "bye"

