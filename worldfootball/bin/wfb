#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/wfb

require 'worldfootball'


Webcache.root =  if File.exist?( '/sports/cache' )
                     puts "  setting web cache to >/sports/cache<"
                     '/sports/cache'
                 else 
                     './cache'
                 end

## convert (default) output directory
Worldfootball.config.convert.out_dir = if File.exist?( '/sports/cache.wfb')
                                           puts "   setting convert out_dir to >/sports/cache.wfb<"
                                           '/sports/cache.wfb'
                                        else
                                           '.' ## use working dir
                                        end

require 'optparse'


module Worldfootball
def self.main( args=ARGV )

opts = {}
parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options]"

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?

## todo - add a single letter option for offline/cached 

  parser.on( "--cache", "--cached", "--offline",
               "use cached data in >#{Webcache.root}<" ) do |cached|
    opts[:cached] = cached
  end

  parser.on( "-x", "--export",
               "export data in comma-separated values (.csv) format in >#{Worldfootball.config.convert.out_dir}<" ) do |export|
    opts[:export] = export
  end

  parser.on( "--dry",
               "dry run / show league page meta info" ) do |dry|
    opts[:dry] = dry
  end
end




parser.parse!( args )

puts "OPTS:"
p opts
puts "ARGV:"
p args


### check special (built-in) commands first
if ['cache'].include?( args[0] ) 
    Worldfootball.list_pages
    exit 0
end


if ['league', 'leagues', 'ls'].include?( args[0] || 'leagues' )
    keys = LEAGUES.keys
     
    pp keys
    puts "   #{keys.size} league(s)"
    
    # puts
    # puts " pages:"
    # pp Worldfootball::PAGES

    exit 0
end



league_code = args[0].downcase

league =  find_league( league_code )  ## league info lookup

if opts[:dry]
    ## output more page meta info
    puts "league meta:"
    pp league
end


season = Season( args[1] || '2024/25' )

pages = league.pages( season: season )


puts
pp pages
puts "   #{pages.size} page(s)"


if opts[:dry]
    ## stop here if dry run
    exit 0
end



## wrap single page record into array
pages = pages.is_a?( Array ) ? pages : [pages]

if opts[:cached]  
     # do nothing
else  ## download to cache
    pages.each_with_index do |page_rec,i|
        slug = page_rec[:slug]
        puts "==> #{i+1}/#{pages.size} - #{league_code} @ #{slug}..."    
        page = Metal.download_schedule( slug  )  
    end  
end


pages.each_with_index do |page_rec,i|
    slug = page_rec[:slug]

    puts "==> #{i+1}/#{pages.size} - #{league_code} @ #{slug}..."
    page = Page::Schedule.from_cache( slug )
    matches = page.matches

    puts "   #{matches.size} match(es)"
end


if opts[:export] 
    ## write out (export to) comma-separated values (.csv) datafile
    convert( league: league_code,
             season: season )
end 



end   # def self.main
end   # module Worldfootball
    

Worldfootball.main( ARGV )

        
puts "bye"
