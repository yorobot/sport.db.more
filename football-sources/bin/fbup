#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbup

require 'football/sources'


load_env   ## use dotenv (.env)


Webcache.root =  if File.exist?( '/sports/cache' )
                     puts "  setting web cache to >/sports/cache<"
                     '/sports/cache'
                 else
                     './cache'
                 end



## set openfootball github org root - note - NOT monorepo (github) root dirc
SportDb::GitHubSync.root = '/sports/openfootball'


## add convenience shortcuts
Country = Sports::Country
League  = Sports::League
Club    = Sports::Club

# Worldfootball.config.convert.out_dir = './o/aug29'
# Worldfootball.config.convert.out_dir = './o'
# Worldfootball.config.convert.out_dir = './o'
Worldfootball.config.convert.out_dir = if File.exist?( '/sports/cache.wfb' )
                                  puts "  setting wfb stage/cache to >/sports/cache.wfb<"
                                          '/sports/cache.wfb'
                                       else
                                         './stage/wfb'
                                       end
#########
##  staging cache settings
Footballdata.config.convert.out_dir =  if File.exist?( '/sports/cache.api.fbdat' )
                                  puts "  setting fbdat stage/cache to >/sports/cache.api.fbdat<"
                                           '/sports/cache.api.fbdat'
                                        else
                                          './stage/fbdat'
                                       end

pp File.expand_path( Footballdata.config.convert.out_dir )


## note -  free tier (tier one) plan - 10 requests/minute
##              (one request every 6 seconds 6*10=60 secs)
##     10 API calls per minute max.
##  note - default sleep (delay in secs) is 3 sec(s)
Webget.config.sleep  = 10




require 'optparse'



args=ARGV


opts = {
    type: 'fbdat',
    download: false,
    push:     false,
}

parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options]"

#  parser.on( "--cache", "--cached", "--offline",
#               "use cached data in #{Webcache.root}" ) do |cached|
#    opts[:cached] = cached
#  end

  parser.on( "-t NAME", "--type=NAME",
               "use source type - default is (#{opts[:type]})" ) do |type|
     opts[:type] = type
  end
#  end


# add download and push ???

end
parser.parse!( args )

puts "OPTS:"
p opts
puts "ARGV:"
p args



source = if ['fbdat'].include?( opts[:type] )
               Footballdata
        elsif ['wfb'].include?( opts[:type] )
               Worldfootball
        else
              raise ArgumentError, "unknown source type - expected fbdata|wfb; got #{opts[:type]}"
        end

puts "source:"
pp source


league      =  (args[0] || 'eng.1' ).downcase
season      =  (args[1] || '2024/25')

datasets = [
  [league, [season]]
]

puts "datasets:"
pp datasets



Fbup.process( datasets,
                  source:   source,
                  download: opts[:download],
                  push:     opts[:push] )


puts "bye"

